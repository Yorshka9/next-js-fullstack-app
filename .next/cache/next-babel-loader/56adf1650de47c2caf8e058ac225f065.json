{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"D:\\\\Code\\\\NextJS\\\\react-storyblok-next-boilerplate-master\\\\pages\\\\[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from '../components/modules/ImageModule';\nimport NavModule from '../components/modules/NavModule';\nimport Nav from '../components/nav';\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(function (r) {\n    return r.json();\n  });\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nvar SlugPage = function SlugPage(_ref) {\n  var data = _ref.data;\n  var content = data.content;\n  var imageModuleData = content.components.find(function (item) {\n    return item.component === 'Image Module';\n  });\n  var headlineModuleData = content.components.find(function (item) {\n    return item.component === 'Headline Module';\n  });\n  var navModuleData = content.components.find(function (item) {\n    return item.component === 'Nav Module';\n  });\n  console.log(navModuleData.Group[0]);\n  console.log(navModuleData.Group[1]);\n  var codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[0].na,\n    url: navModuleData.url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }) : null, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"\\uD83C\\uDF08 This is what you are getting back from Storyblok: \\uD83C\\uDF08\"), __jsx(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }), headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.Image,\n    copy: imageModuleData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nSlugPage.getInitialProps = function _callee(_ref2) {\n  var query, page, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n\n          /* {query} is an object we receive within this method from Next,\n          so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n          page = query.page;\n          /* Calling our internal api endpoint so that we can fetch Storyblok content\n          server-side (we are on client-side here) */\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetchUrl(\"http://localhost:3000/api/page/\".concat(page)));\n\n        case 4:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            data: data\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["D:/Code/NextJS/react-storyblok-next-boilerplate-master/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","NavModule","Nav","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","headlineModuleData","navModuleData","console","log","Group","codeString","JSON","stringify","na","Title","Image","Copy","getInitialProps","query","page"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from '../components/modules/ImageModule';\nimport NavModule from '../components/modules/NavModule';\nimport Nav from '../components/nav'\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const imageModuleData = content.components.find((item) => item.component === 'Image Module');\n  const headlineModuleData = content.components.find((item) => item.component === 'Headline Module');\n  const navModuleData = content.components.find((item) => item.component === 'Nav Module');\n\n  console.log(navModuleData.Group[0]);\n  console.log(navModuleData.Group[1]);\n\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <DefaultLayout>\n      {navModuleData ? <NavModule name={navModuleData.Group[0].na} url={navModuleData.url.url} /> : null}\n      <h3>ðŸŒˆ This is what you are getting back from Storyblok: ðŸŒˆ</h3>\n      <Nav />\n      {headlineModuleData ? <HeadlineModule title={headlineModuleData.Title} /> : null}\n\n      {imageModuleData ? <ImageModule image={imageModuleData.Image} copy={imageModuleData.Copy} /> : null}\n\n    </DefaultLayout>\n  );\n};\n\n/* Before rendering, we are calling our internal API endpoint (server).\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\nSlugPage.getInitialProps = async ({ query }) => {\n  /* {query} is an object we receive within this method from Next,\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const { page } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\n\tserver-side (we are on client-side here) */\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  /* Returning the data back into SlugPage as props */\n  return { data }; /* This is the same as { data: data } */\n};\n\nexport default SlugPage;\n"]},"metadata":{},"sourceType":"module"}