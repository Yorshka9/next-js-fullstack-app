{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\NextJS\\\\react-storyblok-next-boilerplate-master\\\\pages\\\\[page].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from '../components/modules/ImageModule';\nimport NavModule from '../components/modules/NavModule';\nimport Navbar from '../components/NavBar';\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst SlugPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const imageModuleData = content.components.find(item => item.component === 'Image Module');\n  const headlineModuleData = content.components.find(item => item.component === 'Headline Module');\n  const navModuleData = content.components.find(item => item.component === 'Nav Module');\n  console.log(navModuleData.Group[0]);\n  console.log(navModuleData.Group[1]);\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"\\uD83C\\uDF08 This is what you are getting back from Storyblok: \\uD83C\\uDF08\"), headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.Image,\n    copy: imageModuleData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }) : null);\n};\n\nPage.getInitialProps = async ({\n  query\n}) => {\n  const {\n    page\n  } = query;\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  return {\n    data\n  };\n};\n\nexport default SlugPage;","map":{"version":3,"sources":["D:/Code/NextJS/react-storyblok-next-boilerplate-master/pages/[page].js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","NavModule","Navbar","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","headlineModuleData","navModuleData","console","log","Group","codeString","JSON","stringify","Title","Image","Copy","Page","getInitialProps","query","page"],"mappings":";;;;AAAA;;AAEA;AACA,OAAOA,KAAP,MAAkB,oBAAlB;AAEA;;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AAEA;;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,OAAOC,eAAP,MAA4B,uCAA5B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA;;AACA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOR,KAAK,CAACQ,GAAD,CAAL,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAArB,CAAP;AACD;AAED;;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcD,IAApB;AACA,QAAME,eAAe,GAAGD,OAAO,CAACE,UAAR,CAAmBC,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,cAArD,CAAxB;AACA,QAAMC,kBAAkB,GAAGN,OAAO,CAACE,UAAR,CAAmBC,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,iBAArD,CAA3B;AACA,QAAME,aAAa,GAAGP,OAAO,CAACE,UAAR,CAAmBC,IAAnB,CAAyBC,IAAD,IAAUA,IAAI,CAACC,SAAL,KAAmB,YAArD,CAAtB;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAa,CAACG,KAAd,CAAoB,CAApB,CAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYF,aAAa,CAACG,KAAd,CAAoB,CAApB,CAAZ;AAEA,QAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeb,OAAf,CAAnB;AACA;;AACA,SACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mFAJF,EAKGM,kBAAkB,GAAG,MAAC,cAAD;AAAgB,IAAA,KAAK,EAAEA,kBAAkB,CAACQ,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyD,IAL9E,EAOGb,eAAe,GAAG,MAAC,WAAD;AAAa,IAAA,KAAK,EAAEA,eAAe,CAACc,KAApC;AAA2C,IAAA,IAAI,EAAEd,eAAe,CAACe,IAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAA+E,IAPjG,CADF;AAYD,CAvBD;;AA0BAC,IAAI,CAACC,eAAL,GAAuB,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAMpB,IAAI,GAAG,MAAMN,QAAQ,CAAE,kCAAiC2B,IAAK,EAAxC,CAA3B;AACA,SAAO;AAAErB,IAAAA;AAAF,GAAP;AACD,CAJD;;AAMA,eAAeD,QAAf","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n\n/* layout */\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n\n/* components */\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from '../components/modules/ImageModule';\nimport NavModule from '../components/modules/NavModule';\nimport Navbar from '../components/NavBar';\n\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n\n/* This route gets hit when our user appends a slug to\nthe url and therefore the page request, e.g. your-site.com/about */\nconst SlugPage = ({ data }) => {\n  const { content } = data;\n  const imageModuleData = content.components.find((item) => item.component === 'Image Module');\n  const headlineModuleData = content.components.find((item) => item.component === 'Headline Module');\n  const navModuleData = content.components.find((item) => item.component === 'Nav Module');\n\n  console.log(navModuleData.Group[0]);\n  console.log(navModuleData.Group[1]);\n\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n  return (\n    <DefaultLayout>\n      <Navbar/>\n      \n\n      <h3>ðŸŒˆ This is what you are getting back from Storyblok: ðŸŒˆ</h3>\n      {headlineModuleData ? <HeadlineModule title={headlineModuleData.Title} /> : null}\n\n      {imageModuleData ? <ImageModule image={imageModuleData.Image} copy={imageModuleData.Copy} /> : null}\n\n    </DefaultLayout>\n  );\n};\n\n\nPage.getInitialProps = async ({ query }) => {\n  const { page } = query;\n  const data = await fetchUrl(`http://localhost:3000/api/page/${page}`);\n  return { data }; \n};\n\nexport default SlugPage;\n"]},"metadata":{},"sourceType":"module"}