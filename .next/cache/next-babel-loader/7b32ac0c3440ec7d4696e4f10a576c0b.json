{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\NextJS\\\\react-storyblok-next-boilerplate-master\\\\pages\\\\api\\\\page\\\\blog.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/* ðŸŒˆ This is the client side ðŸŒˆ*/\n\n/* dependencies */\nimport fetch from \"isomorphic-unfetch\";\n/* layout */\n\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\n/* components */\n\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\nimport ImageModule from '../components/modules/ImageModule';\nimport NavModule from '../components/modules/NavModule';\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\n\nfunction fetchUrl(url) {\n  return fetch(url).then(r => r.json());\n}\n/* This route gets hit when our user appends a slug to\r\nthe url and therefore the page request, e.g. your-site.com/about */\n\n\nconst SlugPage = ({\n  data\n}) => {\n  const {\n    content\n  } = data;\n  const imageModuleData = content.components.find(item => item.component === 'Image Module');\n  const headlineModuleData = content.components.find(item => item.component === 'Headline Module');\n  const navModuleData = content.components.find(item => item.component === 'Nav Module');\n  console.log(navModuleData.Group[0]);\n  console.log(navModuleData.Group[1]);\n  const codeString = JSON.stringify(content);\n  /* Now you need to map your own components, I just left the headline module as reference */\n\n  return __jsx(DefaultLayout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[0].name,\n    url: navModuleData.Group[0].url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }) : null, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[1].name,\n    url: navModuleData.Group[1].url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }) : null, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[2].name,\n    url: navModuleData.Group[2].url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }) : null, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[3].name,\n    url: navModuleData.Group[3].url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }) : null, navModuleData ? __jsx(NavModule, {\n    name: navModuleData.Group[4].name,\n    url: navModuleData.Group[4].url.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }) : null, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"\\uD83C\\uDF08 This is what you are getting back from Storyblok: \\uD83C\\uDF08\"), headlineModuleData ? __jsx(HeadlineModule, {\n    title: headlineModuleData.Title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }) : null, imageModuleData ? __jsx(ImageModule, {\n    image: imageModuleData.Image,\n    copy: imageModuleData.Copy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }) : null);\n};\n/* Before rendering, we are calling our internal API endpoint (server).\r\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\n\n\nBlog.getInitialProps = async ({\n  query\n}) => {\n  /* {query} is an object we receive within this method from Next,\r\n  so that we can retrieve the slug (e.g. '/welcome') coming with the route */\n  const {\n    page\n  } = query;\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\r\n  server-side (we are on client-side here) */\n\n  const data = await fetchUrl(`http://localhost:3000/api/page/${blog}`);\n  /* Returning the data back into SlugPage as props */\n\n  return {\n    data\n  };\n  /* This is the same as { data: data } */\n};\n\nexport default Blog;","map":{"version":3,"sources":["D:/Code/NextJS/react-storyblok-next-boilerplate-master/pages/api/page/blog.js"],"names":["fetch","DefaultLayout","HeadlineModule","ParagraphModule","ImageModule","NavModule","fetchUrl","url","then","r","json","SlugPage","data","content","imageModuleData","components","find","item","component","headlineModuleData","navModuleData","console","log","Group","codeString","JSON","stringify","name","Title","Image","Copy","Blog","getInitialProps","query","page","blog"],"mappings":"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","sourcesContent":["/* ðŸŒˆ This is the client side ðŸŒˆ*/\r\n\r\n/* dependencies */\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\n/* layout */\r\nimport DefaultLayout from \"../components/layouts/DefaultLayout\";\r\n\r\n/* components */\r\nimport HeadlineModule from \"../components/modules/HeadlineModule\";\r\nimport ParagraphModule from \"../components/modules/ParagraphModule\";\r\nimport ImageModule from '../components/modules/ImageModule';\r\nimport NavModule from '../components/modules/NavModule';\r\n\r\n/* Helper function to fetch data - do we need this as an extra function? Debatable. ðŸ˜Š */\r\nfunction fetchUrl(url) {\r\n  return fetch(url).then(r => r.json());\r\n}\r\n\r\n/* This route gets hit when our user appends a slug to\r\nthe url and therefore the page request, e.g. your-site.com/about */\r\nconst SlugPage = ({ data }) => {\r\n  const { content } = data;\r\n  const imageModuleData = content.components.find((item) => item.component === 'Image Module');\r\n  const headlineModuleData = content.components.find((item) => item.component === 'Headline Module');\r\n  const navModuleData = content.components.find((item) => item.component === 'Nav Module');\r\n\r\n  console.log(navModuleData.Group[0]);\r\n  console.log(navModuleData.Group[1]);\r\n\r\n  const codeString = JSON.stringify(content);\r\n  /* Now you need to map your own components, I just left the headline module as reference */\r\n  return (\r\n    <DefaultLayout>\r\n      {navModuleData ? <NavModule name={navModuleData.Group[0].name} url={navModuleData.Group[0].url.url} /> : null}\r\n      {navModuleData ? <NavModule name={navModuleData.Group[1].name} url={navModuleData.Group[1].url.url} /> : null}\r\n      {navModuleData ? <NavModule name={navModuleData.Group[2].name} url={navModuleData.Group[2].url.url} /> : null}\r\n      {navModuleData ? <NavModule name={navModuleData.Group[3].name} url={navModuleData.Group[3].url.url} /> : null}\r\n      {navModuleData ? <NavModule name={navModuleData.Group[4].name} url={navModuleData.Group[4].url.url} /> : null}\r\n      \r\n\r\n      <h3>ðŸŒˆ This is what you are getting back from Storyblok: ðŸŒˆ</h3>\r\n      {headlineModuleData ? <HeadlineModule title={headlineModuleData.Title} /> : null}\r\n\r\n      {imageModuleData ? <ImageModule image={imageModuleData.Image} copy={imageModuleData.Copy} /> : null}\r\n\r\n    </DefaultLayout>\r\n  );\r\n};\r\n\r\n/* Before rendering, we are calling our internal API endpoint (server).\r\nThis call is hitting the code we wrote in 'pages/api/page/[slug].js' */\r\nBlog.getInitialProps = async ({ query }) => {\r\n  /* {query} is an object we receive within this method from Next,\r\n\tso that we can retrieve the slug (e.g. '/welcome') coming with the route */\r\n  const { page } = query;\r\n  /* Calling our internal api endpoint so that we can fetch Storyblok content\r\n\tserver-side (we are on client-side here) */\r\n  const data = await fetchUrl(`http://localhost:3000/api/page/${blog}`);\r\n  /* Returning the data back into SlugPage as props */\r\n  return { data }; /* This is the same as { data: data } */\r\n};\r\n\r\nexport default Blog;\r\n"]},"metadata":{},"sourceType":"module"}